// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/finleap-connect/monoskope/pkg/api/gateway (interfaces: APITokenClient)

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	gateway "github.com/finleap-connect/monoskope/pkg/api/gateway"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAPITokenClient is a mock of APITokenClient interface.
type MockAPITokenClient struct {
	ctrl     *gomock.Controller
	recorder *MockAPITokenClientMockRecorder
}

// MockAPITokenClientMockRecorder is the mock recorder for MockAPITokenClient.
type MockAPITokenClientMockRecorder struct {
	mock *MockAPITokenClient
}

// NewMockAPITokenClient creates a new mock instance.
func NewMockAPITokenClient(ctrl *gomock.Controller) *MockAPITokenClient {
	mock := &MockAPITokenClient{ctrl: ctrl}
	mock.recorder = &MockAPITokenClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPITokenClient) EXPECT() *MockAPITokenClientMockRecorder {
	return m.recorder
}

// RequestAPIToken mocks base method.
func (m *MockAPITokenClient) RequestAPIToken(arg0 context.Context, arg1 *gateway.APITokenRequest, arg2 ...grpc.CallOption) (*gateway.APITokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestAPIToken", varargs...)
	ret0, _ := ret[0].(*gateway.APITokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestAPIToken indicates an expected call of RequestAPIToken.
func (mr *MockAPITokenClientMockRecorder) RequestAPIToken(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestAPIToken", reflect.TypeOf((*MockAPITokenClient)(nil).RequestAPIToken), varargs...)
}
