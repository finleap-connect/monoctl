// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/finleap-connect/monoskope/pkg/api/gateway (interfaces: ClusterAuthClient)

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	gateway "github.com/finleap-connect/monoskope/pkg/api/gateway"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockClusterAuthClient is a mock of ClusterAuthClient interface.
type MockClusterAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterAuthClientMockRecorder
}

// MockClusterAuthClientMockRecorder is the mock recorder for MockClusterAuthClient.
type MockClusterAuthClientMockRecorder struct {
	mock *MockClusterAuthClient
}

// NewMockClusterAuthClient creates a new mock instance.
func NewMockClusterAuthClient(ctrl *gomock.Controller) *MockClusterAuthClient {
	mock := &MockClusterAuthClient{ctrl: ctrl}
	mock.recorder = &MockClusterAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterAuthClient) EXPECT() *MockClusterAuthClientMockRecorder {
	return m.recorder
}

// GetAuthToken mocks base method.
func (m *MockClusterAuthClient) GetAuthToken(arg0 context.Context, arg1 *gateway.ClusterAuthTokenRequest, arg2 ...grpc.CallOption) (*gateway.ClusterAuthTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthToken", varargs...)
	ret0, _ := ret[0].(*gateway.ClusterAuthTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthToken indicates an expected call of GetAuthToken.
func (mr *MockClusterAuthClientMockRecorder) GetAuthToken(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthToken", reflect.TypeOf((*MockClusterAuthClient)(nil).GetAuthToken), varargs...)
}
