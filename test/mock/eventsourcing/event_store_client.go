// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/finleap-connect/monoskope/pkg/api/eventsourcing (interfaces: EventStoreClient,EventStore_RetrieveClient)

// Package eventsourcing is a generated GoMock package.
package eventsourcing

import (
	context "context"
	reflect "reflect"

	eventsourcing "github.com/finleap-connect/monoskope/pkg/api/eventsourcing"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockEventStoreClient is a mock of EventStoreClient interface.
type MockEventStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventStoreClientMockRecorder
}

// MockEventStoreClientMockRecorder is the mock recorder for MockEventStoreClient.
type MockEventStoreClientMockRecorder struct {
	mock *MockEventStoreClient
}

// NewMockEventStoreClient creates a new mock instance.
func NewMockEventStoreClient(ctrl *gomock.Controller) *MockEventStoreClient {
	mock := &MockEventStoreClient{ctrl: ctrl}
	mock.recorder = &MockEventStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStoreClient) EXPECT() *MockEventStoreClientMockRecorder {
	return m.recorder
}

// Retrieve mocks base method.
func (m *MockEventStoreClient) Retrieve(arg0 context.Context, arg1 *eventsourcing.EventFilter, arg2 ...grpc.CallOption) (eventsourcing.EventStore_RetrieveClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Retrieve", varargs...)
	ret0, _ := ret[0].(eventsourcing.EventStore_RetrieveClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockEventStoreClientMockRecorder) Retrieve(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockEventStoreClient)(nil).Retrieve), varargs...)
}

// Store mocks base method.
func (m *MockEventStoreClient) Store(arg0 context.Context, arg1 ...grpc.CallOption) (eventsourcing.EventStore_StoreClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Store", varargs...)
	ret0, _ := ret[0].(eventsourcing.EventStore_StoreClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockEventStoreClientMockRecorder) Store(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockEventStoreClient)(nil).Store), varargs...)
}

// MockEventStore_RetrieveClient is a mock of EventStore_RetrieveClient interface.
type MockEventStore_RetrieveClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventStore_RetrieveClientMockRecorder
}

// MockEventStore_RetrieveClientMockRecorder is the mock recorder for MockEventStore_RetrieveClient.
type MockEventStore_RetrieveClientMockRecorder struct {
	mock *MockEventStore_RetrieveClient
}

// NewMockEventStore_RetrieveClient creates a new mock instance.
func NewMockEventStore_RetrieveClient(ctrl *gomock.Controller) *MockEventStore_RetrieveClient {
	mock := &MockEventStore_RetrieveClient{ctrl: ctrl}
	mock.recorder = &MockEventStore_RetrieveClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStore_RetrieveClient) EXPECT() *MockEventStore_RetrieveClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockEventStore_RetrieveClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockEventStore_RetrieveClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockEventStore_RetrieveClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockEventStore_RetrieveClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockEventStore_RetrieveClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockEventStore_RetrieveClient)(nil).Context))
}

// Header mocks base method.
func (m *MockEventStore_RetrieveClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockEventStore_RetrieveClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockEventStore_RetrieveClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockEventStore_RetrieveClient) Recv() (*eventsourcing.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*eventsourcing.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockEventStore_RetrieveClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockEventStore_RetrieveClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockEventStore_RetrieveClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockEventStore_RetrieveClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockEventStore_RetrieveClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockEventStore_RetrieveClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockEventStore_RetrieveClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockEventStore_RetrieveClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockEventStore_RetrieveClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockEventStore_RetrieveClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockEventStore_RetrieveClient)(nil).Trailer))
}
